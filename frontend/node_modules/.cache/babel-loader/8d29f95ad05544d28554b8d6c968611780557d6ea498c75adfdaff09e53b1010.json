{"ast":null,"code":"import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { useCartesianContext } from '../context/CartesianProvider';\nimport { isBandScale } from '../internals/isBandScale';\nimport { getSVGPoint } from '../internals/getSVGPoint';\nimport { useSvgRef } from './useSvgRef';\nimport { useDrawingArea } from './useDrawingArea';\nfunction getAsANumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = useSvgRef();\n  const drawingArea = useDrawingArea();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = useCartesianContext();\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    function getNewAxisState(axisConfig, mouseValue) {\n      const {\n        scale,\n        data: axisData,\n        reverse\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const valueAsNumber = getAsANumber(value);\n        const closestIndex = axisData === null || axisData === void 0 ? void 0 : axisData.findIndex((pointValue, index) => {\n          const v = getAsANumber(pointValue);\n          if (v > valueAsNumber) {\n            if (index === 0 || Math.abs(valueAsNumber - v) <= Math.abs(valueAsNumber - getAsANumber(axisData[index - 1]))) {\n              return true;\n            }\n          }\n          if (v <= valueAsNumber) {\n            if (index === axisData.length - 1 || Math.abs(getAsANumber(value) - v) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index + 1]))) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      if (reverse) {\n        const reverseIndex = axisData.length - 1 - dataIndex;\n        return {\n          index: reverseIndex,\n          value: axisData[reverseIndex]\n        };\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    }\n    const handleOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'exitChart'\n      });\n    };\n    const handleMove = event => {\n      const target = 'targetTouches' in event ? event.targetTouches[0] : event;\n      const svgPoint = getSVGPoint(element, target);\n      mousePosition.current = {\n        x: svgPoint.x,\n        y: svgPoint.y\n      };\n      if (!drawingArea.isPointInside(svgPoint)) {\n        dispatch({\n          type: 'exitChart'\n        });\n        return;\n      }\n      const newStateX = getNewAxisState(xAxis[usedXAxis], svgPoint.x);\n      const newStateY = getNewAxisState(yAxis[usedYAxis], svgPoint.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    const handleDown = event => {\n      const target = event.currentTarget;\n      if (!target) {\n        return;\n      }\n      if (target.hasPointerCapture(event.pointerId)) {\n        target.releasePointerCapture(event.pointerId);\n      }\n    };\n    element.addEventListener('pointerdown', handleDown);\n    element.addEventListener('pointermove', handleMove);\n    element.addEventListener('pointerout', handleOut);\n    element.addEventListener('pointercancel', handleOut);\n    element.addEventListener('pointerleave', handleOut);\n    return () => {\n      element.removeEventListener('pointerdown', handleDown);\n      element.removeEventListener('pointermove', handleMove);\n      element.removeEventListener('pointerout', handleOut);\n      element.removeEventListener('pointercancel', handleOut);\n      element.removeEventListener('pointerleave', handleOut);\n    };\n  }, [svgRef, dispatch, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener, drawingArea]);\n};","map":{"version":3,"names":["React","InteractionContext","useCartesianContext","isBandScale","getSVGPoint","useSvgRef","useDrawingArea","getAsANumber","value","Date","getTime","useAxisEvents","disableAxisListener","svgRef","drawingArea","xAxis","yAxis","xAxisIds","yAxisIds","dispatch","useContext","usedXAxis","usedYAxis","mousePosition","useRef","x","y","useEffect","element","current","getNewAxisState","axisConfig","mouseValue","scale","data","axisData","reverse","invert","undefined","valueAsNumber","closestIndex","findIndex","pointValue","index","v","Math","abs","length","dataIndex","bandwidth","floor","min","range","step","reverseIndex","handleOut","type","handleMove","event","target","targetTouches","svgPoint","isPointInside","newStateX","newStateY","handleDown","currentTarget","hasPointerCapture","pointerId","releasePointerCapture","addEventListener","removeEventListener"],"sources":["/Users/neilk/Documents/WebDev/workout-tracker/node_modules/@mui/x-charts/esm/hooks/useAxisEvents.js"],"sourcesContent":["import * as React from 'react';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { useCartesianContext } from '../context/CartesianProvider';\nimport { isBandScale } from '../internals/isBandScale';\nimport { getSVGPoint } from '../internals/getSVGPoint';\nimport { useSvgRef } from './useSvgRef';\nimport { useDrawingArea } from './useDrawingArea';\nfunction getAsANumber(value) {\n  return value instanceof Date ? value.getTime() : value;\n}\nexport const useAxisEvents = disableAxisListener => {\n  const svgRef = useSvgRef();\n  const drawingArea = useDrawingArea();\n  const {\n    xAxis,\n    yAxis,\n    xAxisIds,\n    yAxisIds\n  } = useCartesianContext();\n  const {\n    dispatch\n  } = React.useContext(InteractionContext);\n  const usedXAxis = xAxisIds[0];\n  const usedYAxis = yAxisIds[0];\n\n  // Use a ref to avoid rerendering on every mousemove event.\n  const mousePosition = React.useRef({\n    x: -1,\n    y: -1\n  });\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || disableAxisListener) {\n      return () => {};\n    }\n    function getNewAxisState(axisConfig, mouseValue) {\n      const {\n        scale,\n        data: axisData,\n        reverse\n      } = axisConfig;\n      if (!isBandScale(scale)) {\n        const value = scale.invert(mouseValue);\n        if (axisData === undefined) {\n          return {\n            value\n          };\n        }\n        const valueAsNumber = getAsANumber(value);\n        const closestIndex = axisData?.findIndex((pointValue, index) => {\n          const v = getAsANumber(pointValue);\n          if (v > valueAsNumber) {\n            if (index === 0 || Math.abs(valueAsNumber - v) <= Math.abs(valueAsNumber - getAsANumber(axisData[index - 1]))) {\n              return true;\n            }\n          }\n          if (v <= valueAsNumber) {\n            if (index === axisData.length - 1 || Math.abs(getAsANumber(value) - v) < Math.abs(getAsANumber(value) - getAsANumber(axisData[index + 1]))) {\n              return true;\n            }\n          }\n          return false;\n        });\n        return {\n          value: closestIndex !== undefined && closestIndex >= 0 ? axisData[closestIndex] : value,\n          index: closestIndex\n        };\n      }\n      const dataIndex = scale.bandwidth() === 0 ? Math.floor((mouseValue - Math.min(...scale.range()) + scale.step() / 2) / scale.step()) : Math.floor((mouseValue - Math.min(...scale.range())) / scale.step());\n      if (dataIndex < 0 || dataIndex >= axisData.length) {\n        return null;\n      }\n      if (reverse) {\n        const reverseIndex = axisData.length - 1 - dataIndex;\n        return {\n          index: reverseIndex,\n          value: axisData[reverseIndex]\n        };\n      }\n      return {\n        index: dataIndex,\n        value: axisData[dataIndex]\n      };\n    }\n    const handleOut = () => {\n      mousePosition.current = {\n        x: -1,\n        y: -1\n      };\n      dispatch({\n        type: 'exitChart'\n      });\n    };\n    const handleMove = event => {\n      const target = 'targetTouches' in event ? event.targetTouches[0] : event;\n      const svgPoint = getSVGPoint(element, target);\n      mousePosition.current = {\n        x: svgPoint.x,\n        y: svgPoint.y\n      };\n      if (!drawingArea.isPointInside(svgPoint)) {\n        dispatch({\n          type: 'exitChart'\n        });\n        return;\n      }\n      const newStateX = getNewAxisState(xAxis[usedXAxis], svgPoint.x);\n      const newStateY = getNewAxisState(yAxis[usedYAxis], svgPoint.y);\n      dispatch({\n        type: 'updateAxis',\n        data: {\n          x: newStateX,\n          y: newStateY\n        }\n      });\n    };\n    const handleDown = event => {\n      const target = event.currentTarget;\n      if (!target) {\n        return;\n      }\n      if (target.hasPointerCapture(event.pointerId)) {\n        target.releasePointerCapture(event.pointerId);\n      }\n    };\n    element.addEventListener('pointerdown', handleDown);\n    element.addEventListener('pointermove', handleMove);\n    element.addEventListener('pointerout', handleOut);\n    element.addEventListener('pointercancel', handleOut);\n    element.addEventListener('pointerleave', handleOut);\n    return () => {\n      element.removeEventListener('pointerdown', handleDown);\n      element.removeEventListener('pointermove', handleMove);\n      element.removeEventListener('pointerout', handleOut);\n      element.removeEventListener('pointercancel', handleOut);\n      element.removeEventListener('pointerleave', handleOut);\n    };\n  }, [svgRef, dispatch, usedYAxis, yAxis, usedXAxis, xAxis, disableAxisListener, drawingArea]);\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}