{"ast":null,"code":"import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { useSeries } from '../hooks/useSeries';\nimport { useSvgRef } from '../hooks';\nimport { useCartesianContext } from '../context/CartesianProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction ChartsOnAxisClickHandler(props) {\n  const {\n    onAxisClick\n  } = props;\n  const svgRef = useSvgRef();\n  const series = useSeries();\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const {\n    xAxisIds,\n    xAxis,\n    yAxisIds,\n    yAxis\n  } = useCartesianContext();\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const handleMouseClick = event => {\n      var _USED_AXIS_ID$data;\n      event.preventDefault();\n      const isXaxis = (axis.x && axis.x.index) !== undefined;\n      const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n      const dataIndex = isXaxis ? axis.x && axis.x.index : axis.y && axis.y.index;\n      if (dataIndex == null) {\n        return;\n      }\n      const seriesValues = {};\n      Object.keys(series).filter(seriesType => ['bar', 'line'].includes(seriesType)).forEach(seriesType => {\n        var _series$seriesType;\n        (_series$seriesType = series[seriesType]) === null || _series$seriesType === void 0 || _series$seriesType.seriesOrder.forEach(seriesId => {\n          const seriesItem = series[seriesType].series[seriesId];\n          const axisKey = isXaxis ? seriesItem.xAxisKey : seriesItem.yAxisKey;\n          if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n            seriesValues[seriesId] = seriesItem.data[dataIndex];\n          }\n        });\n      });\n      const axisValue = (_USED_AXIS_ID$data = (isXaxis ? xAxis : yAxis)[USED_AXIS_ID].data) === null || _USED_AXIS_ID$data === void 0 ? void 0 : _USED_AXIS_ID$data[dataIndex];\n      onAxisClick(event, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    };\n    element.addEventListener('click', handleMouseClick);\n    return () => {\n      element.removeEventListener('click', handleMouseClick);\n    };\n  }, [axis.x, axis.y, onAxisClick, series, svgRef, xAxis, xAxisIds, yAxis, yAxisIds]);\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/_jsx(React.Fragment, {});\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsOnAxisClickHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The function called for onClick events.\n   * The second argument contains information about all line/bar elements at the current mouse position.\n   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.\n   * @param {null | AxisData} data The data about the clicked axis and items associated with it.\n   */\n  onAxisClick: PropTypes.func\n} : void 0;\nexport { ChartsOnAxisClickHandler };","map":{"version":3,"names":["React","PropTypes","InteractionContext","useSeries","useSvgRef","useCartesianContext","jsx","_jsx","ChartsOnAxisClickHandler","props","onAxisClick","svgRef","series","axis","useContext","xAxisIds","xAxis","yAxisIds","yAxis","useEffect","element","current","handleMouseClick","event","_USED_AXIS_ID$data","preventDefault","isXaxis","x","index","undefined","USED_AXIS_ID","dataIndex","y","seriesValues","Object","keys","filter","seriesType","includes","forEach","_series$seriesType","seriesOrder","seriesId","seriesItem","axisKey","xAxisKey","yAxisKey","data","axisValue","addEventListener","removeEventListener","Fragment","process","env","NODE_ENV","propTypes","func"],"sources":["/Users/neilk/Documents/WebDev/workout-tracker/node_modules/@mui/x-charts/esm/ChartsOnAxisClickHandler/ChartsOnAxisClickHandler.js"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport { InteractionContext } from '../context/InteractionProvider';\nimport { useSeries } from '../hooks/useSeries';\nimport { useSvgRef } from '../hooks';\nimport { useCartesianContext } from '../context/CartesianProvider';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nfunction ChartsOnAxisClickHandler(props) {\n  const {\n    onAxisClick\n  } = props;\n  const svgRef = useSvgRef();\n  const series = useSeries();\n  const {\n    axis\n  } = React.useContext(InteractionContext);\n  const {\n    xAxisIds,\n    xAxis,\n    yAxisIds,\n    yAxis\n  } = useCartesianContext();\n  React.useEffect(() => {\n    const element = svgRef.current;\n    if (element === null || !onAxisClick) {\n      return () => {};\n    }\n    const handleMouseClick = event => {\n      event.preventDefault();\n      const isXaxis = (axis.x && axis.x.index) !== undefined;\n      const USED_AXIS_ID = isXaxis ? xAxisIds[0] : yAxisIds[0];\n      const dataIndex = isXaxis ? axis.x && axis.x.index : axis.y && axis.y.index;\n      if (dataIndex == null) {\n        return;\n      }\n      const seriesValues = {};\n      Object.keys(series).filter(seriesType => ['bar', 'line'].includes(seriesType)).forEach(seriesType => {\n        series[seriesType]?.seriesOrder.forEach(seriesId => {\n          const seriesItem = series[seriesType].series[seriesId];\n          const axisKey = isXaxis ? seriesItem.xAxisKey : seriesItem.yAxisKey;\n          if (axisKey === undefined || axisKey === USED_AXIS_ID) {\n            seriesValues[seriesId] = seriesItem.data[dataIndex];\n          }\n        });\n      });\n      const axisValue = (isXaxis ? xAxis : yAxis)[USED_AXIS_ID].data?.[dataIndex];\n      onAxisClick(event, {\n        dataIndex,\n        axisValue,\n        seriesValues\n      });\n    };\n    element.addEventListener('click', handleMouseClick);\n    return () => {\n      element.removeEventListener('click', handleMouseClick);\n    };\n  }, [axis.x, axis.y, onAxisClick, series, svgRef, xAxis, xAxisIds, yAxis, yAxisIds]);\n\n  // eslint-disable-next-line react/jsx-no-useless-fragment\n  return /*#__PURE__*/_jsx(React.Fragment, {});\n}\nprocess.env.NODE_ENV !== \"production\" ? ChartsOnAxisClickHandler.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // | To update them edit the TypeScript types and run \"pnpm proptypes\"  |\n  // ----------------------------------------------------------------------\n  /**\n   * The function called for onClick events.\n   * The second argument contains information about all line/bar elements at the current mouse position.\n   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.\n   * @param {null | AxisData} data The data about the clicked axis and items associated with it.\n   */\n  onAxisClick: PropTypes.func\n} : void 0;\nexport { ChartsOnAxisClickHandler };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}