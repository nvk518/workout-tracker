{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { scaleBand, scalePoint, scaleTime } from 'd3-scale';\nimport { isBandScaleConfig, isPointScaleConfig } from '../../models/axis';\nimport { getColorScale, getOrdinalColorScale } from '../../internals/colorScale';\nimport { getTickNumber } from '../../hooks/useTicks';\nimport { getScale } from '../../internals/getScale';\nimport { getAxisExtremum } from './getAxisExtremum';\nimport { normalizeAxis } from './normalizeAxis';\nconst getRange = (drawingArea, axisDirection, isReverse) => {\n  const range = axisDirection === 'x' ? [drawingArea.left, drawingArea.left + drawingArea.width] : [drawingArea.top + drawingArea.height, drawingArea.top];\n  return isReverse ? range.reverse() : range;\n};\nconst zoomedScaleRange = (scaleRange, zoomRange) => {\n  const rangeGap = scaleRange[1] - scaleRange[0];\n  const zoomGap = zoomRange[1] - zoomRange[0];\n\n  // If current zoom show the scale between p1 and p2 percents\n  // The range should be extended by adding [0, p1] and [p2, 100] segments\n  const min = scaleRange[0] - zoomRange[0] * rangeGap / zoomGap;\n  const max = scaleRange[1] + (100 - zoomRange[1]) * rangeGap / zoomGap;\n  return [min, max];\n};\nconst isDateData = data => (data === null || data === void 0 ? void 0 : data[0]) instanceof Date;\nfunction createDateFormatter(axis, range) {\n  const timeScale = scaleTime(axis.data, range);\n  return (v, _ref) => {\n    let {\n      location\n    } = _ref;\n    return location === 'tick' ? timeScale.tickFormat(axis.tickNumber)(v) : \"\".concat(v.toLocaleString());\n  };\n}\nconst DEFAULT_CATEGORY_GAP_RATIO = 0.2;\nconst DEFAULT_BAR_GAP_RATIO = 0.1;\nexport function computeValue(_ref2) {\n  let {\n    drawingArea,\n    formattedSeries,\n    axis: inAxis,\n    extremumGetters,\n    dataset,\n    axisDirection,\n    zoomData\n  } = _ref2;\n  const allAxis = normalizeAxis(inAxis, dataset, axisDirection);\n  const completeAxis = {};\n  allAxis.forEach((axis, axisIndex) => {\n    var _axis$scaleType, _axis$min, _axis$max, _axis$min2, _axis$max2;\n    const isDefaultAxis = axisIndex === 0;\n    const [minData, maxData] = getAxisExtremum(axis, extremumGetters, isDefaultAxis, formattedSeries);\n    const zoom = zoomData === null || zoomData === void 0 ? void 0 : zoomData.find(_ref3 => {\n      let {\n        axisId\n      } = _ref3;\n      return axisId === axis.id;\n    });\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, axisDirection, axis.reverse);\n    if (isBandScaleConfig(axis)) {\n      var _axis$categoryGapRati, _axis$barGapRatio;\n      const categoryGapRatio = (_axis$categoryGapRati = axis.categoryGapRatio) !== null && _axis$categoryGapRati !== void 0 ? _axis$categoryGapRati : DEFAULT_CATEGORY_GAP_RATIO;\n      const barGapRatio = (_axis$barGapRatio = axis.barGapRatio) !== null && _axis$barGapRatio !== void 0 ? _axis$barGapRatio : DEFAULT_BAR_GAP_RATIO;\n      // Reverse range because ordinal scales are presented from top to bottom on y-axis\n      const scaleRange = axisDirection === 'x' ? range : [range[1], range[0]];\n      const zoomedRange = zoomedScaleRange(scaleRange, zoomRange);\n      completeAxis[axis.id] = _extends({\n        categoryGapRatio,\n        barGapRatio\n      }, axis, {\n        scale: scaleBand(axis.data, zoomedRange).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),\n        tickNumber: axis.data.length,\n        colorScale: axis.colorMap && (axis.colorMap.type === 'ordinal' ? getOrdinalColorScale(_extends({\n          values: axis.data\n        }, axis.colorMap)) : getColorScale(axis.colorMap))\n      });\n      if (isDateData(axis.data)) {\n        var _axis$valueFormatter;\n        const dateFormatter = createDateFormatter(axis, scaleRange);\n        completeAxis[axis.id].valueFormatter = (_axis$valueFormatter = axis.valueFormatter) !== null && _axis$valueFormatter !== void 0 ? _axis$valueFormatter : dateFormatter;\n      }\n    }\n    if (isPointScaleConfig(axis)) {\n      const scaleRange = axisDirection === 'x' ? range : [...range].reverse();\n      const zoomedRange = zoomedScaleRange(scaleRange, zoomRange);\n      completeAxis[axis.id] = _extends({}, axis, {\n        scale: scalePoint(axis.data, zoomedRange),\n        tickNumber: axis.data.length,\n        colorScale: axis.colorMap && (axis.colorMap.type === 'ordinal' ? getOrdinalColorScale(_extends({\n          values: axis.data\n        }, axis.colorMap)) : getColorScale(axis.colorMap))\n      });\n      if (isDateData(axis.data)) {\n        var _axis$valueFormatter2;\n        const dateFormatter = createDateFormatter(axis, scaleRange);\n        completeAxis[axis.id].valueFormatter = (_axis$valueFormatter2 = axis.valueFormatter) !== null && _axis$valueFormatter2 !== void 0 ? _axis$valueFormatter2 : dateFormatter;\n      }\n    }\n    if (axis.scaleType === 'band' || axis.scaleType === 'point') {\n      // Could be merged with the two previous \"if conditions\" but then TS does not get that `axis.scaleType` can't be `band` or `point`.\n      return;\n    }\n    const scaleType = (_axis$scaleType = axis.scaleType) !== null && _axis$scaleType !== void 0 ? _axis$scaleType : 'linear';\n    const extremums = [(_axis$min = axis.min) !== null && _axis$min !== void 0 ? _axis$min : minData, (_axis$max = axis.max) !== null && _axis$max !== void 0 ? _axis$max : maxData];\n    const rawTickNumber = getTickNumber(_extends({}, axis, {\n      range,\n      domain: extremums\n    }));\n    const tickNumber = rawTickNumber / ((zoomRange[1] - zoomRange[0]) / 100);\n    const zoomedRange = zoomedScaleRange(range, zoomRange);\n\n    // TODO: move nice to prop? Disable when there is zoom?\n    const scale = getScale(scaleType, extremums, zoomedRange).nice(rawTickNumber);\n    const [minDomain, maxDomain] = scale.domain();\n    const domain = [(_axis$min2 = axis.min) !== null && _axis$min2 !== void 0 ? _axis$min2 : minDomain, (_axis$max2 = axis.max) !== null && _axis$max2 !== void 0 ? _axis$max2 : maxDomain];\n    completeAxis[axis.id] = _extends({}, axis, {\n      scaleType: scaleType,\n      scale: scale.domain(domain),\n      tickNumber,\n      colorScale: axis.colorMap && getColorScale(axis.colorMap)\n    });\n  });\n  return {\n    axis: completeAxis,\n    axisIds: allAxis.map(_ref4 => {\n      let {\n        id\n      } = _ref4;\n      return id;\n    })\n  };\n}","map":{"version":3,"names":["_extends","scaleBand","scalePoint","scaleTime","isBandScaleConfig","isPointScaleConfig","getColorScale","getOrdinalColorScale","getTickNumber","getScale","getAxisExtremum","normalizeAxis","getRange","drawingArea","axisDirection","isReverse","range","left","width","top","height","reverse","zoomedScaleRange","scaleRange","zoomRange","rangeGap","zoomGap","min","max","isDateData","data","Date","createDateFormatter","axis","timeScale","v","_ref","location","tickFormat","tickNumber","concat","toLocaleString","DEFAULT_CATEGORY_GAP_RATIO","DEFAULT_BAR_GAP_RATIO","computeValue","_ref2","formattedSeries","inAxis","extremumGetters","dataset","zoomData","allAxis","completeAxis","forEach","axisIndex","_axis$scaleType","_axis$min","_axis$max","_axis$min2","_axis$max2","isDefaultAxis","minData","maxData","zoom","find","_ref3","axisId","id","start","end","_axis$categoryGapRati","_axis$barGapRatio","categoryGapRatio","barGapRatio","zoomedRange","scale","paddingInner","paddingOuter","length","colorScale","colorMap","type","values","_axis$valueFormatter","dateFormatter","valueFormatter","_axis$valueFormatter2","scaleType","extremums","rawTickNumber","domain","nice","minDomain","maxDomain","axisIds","map","_ref4"],"sources":["/Users/neilk/Documents/WebDev/workout-tracker/node_modules/@mui/x-charts/esm/context/CartesianProvider/computeValue.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport { scaleBand, scalePoint, scaleTime } from 'd3-scale';\nimport { isBandScaleConfig, isPointScaleConfig } from '../../models/axis';\nimport { getColorScale, getOrdinalColorScale } from '../../internals/colorScale';\nimport { getTickNumber } from '../../hooks/useTicks';\nimport { getScale } from '../../internals/getScale';\nimport { getAxisExtremum } from './getAxisExtremum';\nimport { normalizeAxis } from './normalizeAxis';\nconst getRange = (drawingArea, axisDirection, isReverse) => {\n  const range = axisDirection === 'x' ? [drawingArea.left, drawingArea.left + drawingArea.width] : [drawingArea.top + drawingArea.height, drawingArea.top];\n  return isReverse ? range.reverse() : range;\n};\nconst zoomedScaleRange = (scaleRange, zoomRange) => {\n  const rangeGap = scaleRange[1] - scaleRange[0];\n  const zoomGap = zoomRange[1] - zoomRange[0];\n\n  // If current zoom show the scale between p1 and p2 percents\n  // The range should be extended by adding [0, p1] and [p2, 100] segments\n  const min = scaleRange[0] - zoomRange[0] * rangeGap / zoomGap;\n  const max = scaleRange[1] + (100 - zoomRange[1]) * rangeGap / zoomGap;\n  return [min, max];\n};\nconst isDateData = data => data?.[0] instanceof Date;\nfunction createDateFormatter(axis, range) {\n  const timeScale = scaleTime(axis.data, range);\n  return (v, {\n    location\n  }) => location === 'tick' ? timeScale.tickFormat(axis.tickNumber)(v) : `${v.toLocaleString()}`;\n}\nconst DEFAULT_CATEGORY_GAP_RATIO = 0.2;\nconst DEFAULT_BAR_GAP_RATIO = 0.1;\nexport function computeValue({\n  drawingArea,\n  formattedSeries,\n  axis: inAxis,\n  extremumGetters,\n  dataset,\n  axisDirection,\n  zoomData\n}) {\n  const allAxis = normalizeAxis(inAxis, dataset, axisDirection);\n  const completeAxis = {};\n  allAxis.forEach((axis, axisIndex) => {\n    const isDefaultAxis = axisIndex === 0;\n    const [minData, maxData] = getAxisExtremum(axis, extremumGetters, isDefaultAxis, formattedSeries);\n    const zoom = zoomData?.find(({\n      axisId\n    }) => axisId === axis.id);\n    const zoomRange = zoom ? [zoom.start, zoom.end] : [0, 100];\n    const range = getRange(drawingArea, axisDirection, axis.reverse);\n    if (isBandScaleConfig(axis)) {\n      const categoryGapRatio = axis.categoryGapRatio ?? DEFAULT_CATEGORY_GAP_RATIO;\n      const barGapRatio = axis.barGapRatio ?? DEFAULT_BAR_GAP_RATIO;\n      // Reverse range because ordinal scales are presented from top to bottom on y-axis\n      const scaleRange = axisDirection === 'x' ? range : [range[1], range[0]];\n      const zoomedRange = zoomedScaleRange(scaleRange, zoomRange);\n      completeAxis[axis.id] = _extends({\n        categoryGapRatio,\n        barGapRatio\n      }, axis, {\n        scale: scaleBand(axis.data, zoomedRange).paddingInner(categoryGapRatio).paddingOuter(categoryGapRatio / 2),\n        tickNumber: axis.data.length,\n        colorScale: axis.colorMap && (axis.colorMap.type === 'ordinal' ? getOrdinalColorScale(_extends({\n          values: axis.data\n        }, axis.colorMap)) : getColorScale(axis.colorMap))\n      });\n      if (isDateData(axis.data)) {\n        const dateFormatter = createDateFormatter(axis, scaleRange);\n        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;\n      }\n    }\n    if (isPointScaleConfig(axis)) {\n      const scaleRange = axisDirection === 'x' ? range : [...range].reverse();\n      const zoomedRange = zoomedScaleRange(scaleRange, zoomRange);\n      completeAxis[axis.id] = _extends({}, axis, {\n        scale: scalePoint(axis.data, zoomedRange),\n        tickNumber: axis.data.length,\n        colorScale: axis.colorMap && (axis.colorMap.type === 'ordinal' ? getOrdinalColorScale(_extends({\n          values: axis.data\n        }, axis.colorMap)) : getColorScale(axis.colorMap))\n      });\n      if (isDateData(axis.data)) {\n        const dateFormatter = createDateFormatter(axis, scaleRange);\n        completeAxis[axis.id].valueFormatter = axis.valueFormatter ?? dateFormatter;\n      }\n    }\n    if (axis.scaleType === 'band' || axis.scaleType === 'point') {\n      // Could be merged with the two previous \"if conditions\" but then TS does not get that `axis.scaleType` can't be `band` or `point`.\n      return;\n    }\n    const scaleType = axis.scaleType ?? 'linear';\n    const extremums = [axis.min ?? minData, axis.max ?? maxData];\n    const rawTickNumber = getTickNumber(_extends({}, axis, {\n      range,\n      domain: extremums\n    }));\n    const tickNumber = rawTickNumber / ((zoomRange[1] - zoomRange[0]) / 100);\n    const zoomedRange = zoomedScaleRange(range, zoomRange);\n\n    // TODO: move nice to prop? Disable when there is zoom?\n    const scale = getScale(scaleType, extremums, zoomedRange).nice(rawTickNumber);\n    const [minDomain, maxDomain] = scale.domain();\n    const domain = [axis.min ?? minDomain, axis.max ?? maxDomain];\n    completeAxis[axis.id] = _extends({}, axis, {\n      scaleType: scaleType,\n      scale: scale.domain(domain),\n      tickNumber,\n      colorScale: axis.colorMap && getColorScale(axis.colorMap)\n    });\n  });\n  return {\n    axis: completeAxis,\n    axisIds: allAxis.map(({\n      id\n    }) => id)\n  };\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}